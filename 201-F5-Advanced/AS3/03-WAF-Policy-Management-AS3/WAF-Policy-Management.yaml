---
- import_playbook: "{{playbook_dir}}/files/Install-DO.yaml"

- name: CHMOD WebServer - Close
  hosts: ansible
  gather_facts: False
  vars_files:
    - vars/f5_vars.yml

  tasks:

  - name: Modify Permissions of "{{ ASM_WebServer_File_Location }}" to 777
    ansible.builtin.file:
      path: "{{ ASM_WebServer_File_Location }}"
      state: directory
      mode: '0777'
    become: yes
    become_method: sudo
    become_user: root

- name: AS3 USECASE-3
  hosts: lb
  connection: httpapi
  gather_facts: false

  vars:
    ansible_httpapi_password: "{{ ansible_password }}"
    ansible_network_os: f5networks.f5_bigip.bigip
    ansible_httpapi_use_ssl: yes
    ansible_httpapi_validate_certs: no
    as3_tenant_name: "WorkshopExample"
    F5_Admin_Port: "443"
    F5_VIP_Name: Use-Case-3-VIP
    pool_members: "{{ groups['web'] }}"

  vars_files:
    - vars/f5_vars.yml
 
  tasks:

#hardcode timestamp into variable
  - ansible.builtin.set_fact:
      ASM_Final_File_Name: "{{F5_VIP_Name}}-ASMPolicy-{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}.xml"

  - name: Set a fact named 'provider' with BIG-IP login information
    ansible.builtin.set_fact:
     provider:
      server: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      server_port: "{{ F5_Admin_Port }}"
      validate_certs: no

  - name: GET ASM - Module Install Status
    ansible.builtin.uri:
      url: "https://{{ ansible_host }}:{{F5_Admin_Port}}/mgmt/tm/sys/provision/asm"
      method: GET
      status_code: 200
      timeout: 300
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    delegate_to: localhost
    register: installed_status

  - name: Install ASM - Push via DO (if not Installed)
    ansible.builtin.uri:
      url: "https://{{ ansible_host }}:{{F5_Admin_Port}}/mgmt/shared/declarative-onboarding/declare"
      method: POST
      body: "{{ lookup('template','j2/provision.j2', split_lines=False) }}"
      status_code: 202
      timeout: 300
      body_format: json
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    delegate_to: localhost
    register: do_result
    when: installed_status.json.level != "nominal"
    
  - name: Wait for DO Task to complete
    ansible.builtin.uri:
      url: "https://{{ ansible_host }}:{{F5_Admin_Port}}/mgmt/shared/declarative-onboarding/task/{{ do_result.json.id }}"
      method: GET
      return_content: true
      status_code: 200
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    register: atc_DO_status
    until: atc_DO_status is success
    retries: 30
    delay: 15
    delegate_to: localhost
    when: installed_status.json.level != "nominal"

  - name: Pause for Install to complete
    ansible.builtin.pause:
      minutes: 1
    when: atc_DO_status.changed

# Get Master XML File and store
  - name: Copy Master File to tmp
    ansible.builtin.copy:
      src: "{{ ASM_Master_File }}"
      dest: "{{ ASM_Policy_File }}"

#Validate Existing IP Addresses
  - name: Validate Existing IP Addresses
    ansible.builtin.shell: grep "<ip_address>{{ item }}" {{ ASM_Policy_File }}
    register: Blocked_IP_Valid
    with_items: "{{ Blocked_IPs }}"
    ignore_errors: yes
    when: Blocked_IPs is defined

#Import Additional Disallowed IPs
  - name: Add Disallowed IPs
    community.general.xml:
      path: "{{ ASM_Policy_File }}"
      pretty_print: yes
      input_type: xml
      insertafter: yes
      xpath: /policy/geolocation
      add_children: "<whitelist><ip_address>{{ item.item }}</ip_address><subnet_mask>255.255.255.255</subnet_mask><policy_builder_trusted>false</policy_builder_trusted><ignore_anomalies>false</ignore_anomalies><never_log>false</never_log><block_ip>Always</block_ip><never_learn>false</never_learn><description>blocked</description><ignore_ip_reputation>false</ignore_ip_reputation></whitelist>"
    with_items: "{{ Blocked_IP_Valid.results }}"
    when: Blocked_IPs is defined and item.rc == 1

#Validate Existing URL Addresses
  - name: Validate Existing URL Addresses
    ansible.builtin.shell: grep 'name="{{ item }}"' {{ ASM_Policy_File }}
    register: Blocked_URLs_Valid
    with_items: "{{ Blocked_URLs }}"
    ignore_errors: yes
    when: Blocked_URLs is defined

#create Disallowed URLs Section if missing
  - name: Add Disallowed URLs
    community.general.xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      insertafter: yes
      xpath: /policy/urls/url[*]
      add_children: "<disallowed_urls></disallowed_urls>"
    when: "'<disallowed_urls>' not in lookup('file', ASM_Policy_File ) and Blocked_URLs is defined"

#Import Additional Disallowed URLs
  - name: Add Disallowed URLs
    community.general.xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/urls/disallowed_urls
      add_children:
        - "<url protocol=\"HTTP\" type=\"explicit\" name=\"{{ item.item }}\"/>"
        - "<url protocol=\"HTTPS\" type=\"explicit\" name=\"{{ item.item }}\"/>"
    with_items: "{{ Blocked_URLs_Valid.results }}"
    when: Blocked_URLs is defined and item.rc == 1

#Enable Illegal URL Blocking Violations
  - name: Illegal URL Blocking Violations Enablement
    community.general.xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/blocking/violation[@name="Illegal URL"]
      set_children:
        - "<alarm>true</alarm>"
        - "<block>true</block>"
        - "<learn>true</learn>"
        - "<policy_builder_tracking>enabled</policy_builder_tracking>"
    when: Blocked_URLs is defined

  # - pause:
  #     minutes: 10

  - name: Store Modified File in Webserver
    ansible.builtin.copy:
      src: "{{ ASM_Policy_File }}"
      dest: "{{ ASM_WebServer_File_Location }}{{ ASM_Final_File_Name }}"

  - name: Modify File for Web Use
    ansible.builtin.shell: chcon -t httpd_sys_content_t {{ ASM_WebServer_File_Location }}{{ ASM_Final_File_Name }}

  - name: PUSH AS3 Template
    f5networks.f5_bigip.bigip_as3_deploy:
      content: "{{ lookup('template','j2/configure_as3.j2', split_lines=False) }}"

- name: CHMOD WebServer - Close
  hosts: ansible
  gather_facts: False
  vars_files:
    - vars/f5_vars.yml

  tasks:

  - name: Modify Permissions of "{{ ASM_WebServer_File_Location }}" to 755
    ansible.builtin.file:
      path: "{{ ASM_WebServer_File_Location }}"
      state: directory
      mode: '0755'
    become: yes
    become_method: sudo
    become_user: root